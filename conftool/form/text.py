from dataclasses import dataclass

@dataclass
class Text:
    # Question description
    desc: str
    # Question prompt
    prom: str

t_integration_name = Text(
    desc = "Identifier used in logs generated by the exporter. Default `com.newrelic.labs.sfdc.eventlogfiles`",
    prom = "Integration name?"
)

t_run_as_service = Text(
    desc = """Enable the built-in scheduler.
If set to Yes, the integration will run continuously as a service and self-schedule executions.
If set to No, the integration will run once and finish, so scheduling must be done externally.
Default `N`.""",
    prom = "Run as a service (y/n)?"
)

t_cron_interval = Text(
    desc = "The execution interval (in minutes) used by the external scheduler. Default 60.",
    prom = "Cron interval (1-10000)?"
)

t_service_scheduler_hours = Text(
    desc = "Service schedule configuration: hours. Either '*' or comma separated hours (0-23) when the integration must fire.",
    prom = "Hours?"
)

t_service_scheduler_mins = Text(
    desc="Service schedule configuration: minutes. Either '*' or comma separated minutes (0-59) when the integration must fire.",
    prom="Minutes?"
)

t_num_instances = Text(
    desc = "The exporter can run one or more exports each time it is invoked. Each export is an `instance`.",
    prom = "How many instances do you want to set up (1-10)?"
)

t_instance_name = Text(
    desc = "A symbolic name for the instance.",
    prom = "Instance name?"
)

t_token_url = Text(
    desc = "The Salesforce URL to use for token-based authentication.",
    prom = "Token URL?"
)

t_api_ver = Text(
    desc = "The version of the Salesforce API to use.",
    prom = "API version (x.y)?"
)

t_conf_auth = Text(
    desc = "The authentication configuration. If not configured, it will be read from environment variables.",
    prom = "Do you want to set up authentication (y/n)?"
)

t_grant_type = Text(
    desc = "Grant type, mechanism used for OAuth 2.0 authentication.",
    prom = "Grant type (1-2)?"
)

t_client_id = Text(
    desc = "Consumer key of the connected app.",
    prom = "Client ID?"
)

t_client_secret = Text(
    desc = "Consumer secret of the connected app.",
    prom = "Client secret?"
)

t_username = Text(
    desc = "Username the connected app is impersonating.",
    prom = "Username?"
)

t_password = Text(
    desc = "Password of the user the connected app is impersonating.",
    prom = "Password?"
)

t_private_key = Text(
    desc = "Path to the file containing the private key of the connected app.",
    prom = "Private key file path?"
)

t_subject = Text(
    desc = "Value used for the `sub` claim in the JSON Claims Set for the JWT.",
    prom = "Subject?"
)

t_audience = Text(
    desc = "Value used for the `aud` claim in the JSON Claims Set for the JWT.",
    prom = "Audience?"
)

t_expiration_offset = Text(
    desc = "An offset duration (in minutes) to use when calculating the JWT `exp` claim.",
    prom = "Expiration offset (0-10)?"
)

t_cache_enabled = Text(
    desc = "Set a Redis cache for storing query record IDs and log entry IDs.",
    prom = "Cache enabled (y/n)?"
)

t_redis_host = Text(
    desc = "Redis server hostname or IP address.",
    prom = "Host?"
)

t_redis_post = Text(
    desc = "Redis server port number.",
    prom = "Port?"
)

t_redis_dbnum = Text(
    desc = "Redis database number.",
    prom = "DB number (0-16)?"
)

t_redis_ssl = Text(
    desc = "Enable SSL to connect to the Redis server.",
    prom = "SSL enabled (y/n)?"
)

t_redis_password = Text(
    desc = "Redis password.",
    prom = "Password?"
)

t_redis_expire = Text(
    desc = "The expiration time to use when putting any entry into the cache. The time is specified in days.",
    prom = "Expiration days (0-100)?"
)

t_auth_env_prefix = Text(
    desc = "A prefix to use when looking up environment variables.",
    prom = "Auth env prefix?"
)

t_date_field = Text(
    desc = "The name of the date field on the EventLogFile object to use when building log file queries.",
    prom = "Date field?"
)

t_generation_interval = Text(
    desc = "The value of the Interval field on the EventLogFile object to use when building log file queries.",
    prom = "Generation interval (1-2)?"
)

t_time_lag_minutes = Text(
    desc = "An offset duration (in minutes) to use when building log file queries.",
    prom = "Time lag minutes (0-1000)?"
)

t_logs_enabled = Text(
    desc = "Flag to explicitly enable or disable the default generated log file query.",
    prom = "Logs enabled (y/n)?"
)

t_query_query = Text(
    desc = "The SOQL query to execute.",
    prom = "Query?"
)

t_query_api_name = Text(
    desc = "The name of the Salesforce Platform API to use.",
    prom = "API name (1-2)?"
)

t_query_event_type = Text(
    desc = "The name of an event type to use when transforming log messages and query results to New Relic logs or events.",
    prom = "Event type?"
)

t_query_timestamp_attr = Text(
    desc = "The name of the query record field containing the value to use for the timestamp.",
    prom = "Timestamp attributee?"
)

t_query_rename_timestamp = Text(
    desc = "The name to use for the attribute on the log or event under which the timestamp will be stored.",
    prom = "Rename timestamp?"
)