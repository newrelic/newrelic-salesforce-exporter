from dataclasses import dataclass

@dataclass
class Text:
    # Question description
    desc: str
    # Question promptpt
    prompt: str

t_integration_name = Text(
    desc = "Identifier used in logs generated by the exporter.",
    prompt = "Integration name?"
)

t_run_as_service = Text(
    desc = """Enable the built-in scheduler.
If set to Yes, the integration will run continuously as a service and self-schedule executions.
If set to No, the integration will run once and finish, so scheduling must be done externally.""",
    prompt = "Run as a service (y/n)?"
)

i_cron_interval_min = 1
i_cron_interval_max = 10000
t_cron_interval = Text(
    desc = "The execution interval (in minutes) used by the external scheduler.",
    prompt = f"Cron interval ({i_cron_interval_min}-{i_cron_interval_max})?"
)

t_service_scheduler_hours = Text(
    desc = "Service schedule configuration: hours. Either '*' or comma separated hours (0-23) when the integration must fire.",
    prompt = "Hours?"
)

t_service_scheduler_mins = Text(
    desc = "Service schedule configuration: minutes. Either '*' or comma separated minutes (0-59) when the integration must fire.",
    prompt = "Minutes?"
)

i_num_instances_min = 1
i_num_instances_max = 10
t_num_instances = Text(
    desc = "The exporter can run one or more exports each time it is invoked. Each export is an `instance`.",
    prompt = f"How many instances do you want to set up ({i_num_instances_min}-{i_num_instances_max})?"
)

t_instance_name = Text(
    desc = "A symbolic name for the instance.",
    prompt = "Instance name?"
)

t_instance_labels = Text(
    desc = "A set of labels to include on all logs and events.",
    prompt = None
)

t_token_url = Text(
    desc = "The Salesforce URL to use for token-based authentication.",
    prompt = "Token URL?"
)

t_api_ver = Text(
    desc = "The version of the Salesforce API to use.",
    prompt = "API version (x.y)?"
)

t_conf_auth = Text(
    desc = "The authentication configuration. If not configured, it will be read from environment variables.",
    prompt = "Do you want to set up authentication (y/n)?"
)

i_grant_type_min = 1
i_grant_type_max = 2
t_grant_type = Text(
    desc = "Grant type, mechanism used for OAuth 2.0 authentication.",
    prompt = f"Grant type ({i_grant_type_min}-{i_grant_type_max})?"
)

t_client_id = Text(
    desc = "Consumer key of the connected app.",
    prompt = "Client ID?"
)

t_client_secret = Text(
    desc = "Consumer secret of the connected app.",
    prompt = "Client secret?"
)

t_username = Text(
    desc = "Username the connected app is impersonating.",
    prompt = "Username?"
)

t_password = Text(
    desc = "Password of the user the connected app is impersonating.",
    prompt = "Password?"
)

t_private_key = Text(
    desc = "Path to the file containing the private key of the connected app.",
    prompt = "Private key file path?"
)

t_subject = Text(
    desc = "Value used for the `sub` claim in the JSON Claims Set for the JWT.",
    prompt = "Subject?"
)

t_audience = Text(
    desc = "Value used for the `aud` claim in the JSON Claims Set for the JWT.",
    prompt = "Audience?"
)

i_expiration_offset_min = 0
i_expiration_offset_max = 1440
t_expiration_offset = Text(
    desc = "An offset duration (in minutes) to use when calculating the JWT `exp` claim.",
    prompt = f"Expiration offset ({i_expiration_offset_min}-{i_expiration_offset_max})?"
)

t_cache_enabled = Text(
    desc = "Set a Redis cache for storing query record IDs and log entry IDs.",
    prompt = "Cache enabled (y/n)?"
)

t_redis_host = Text(
    desc = "Redis server hostname or IP address.",
    prompt = "Host?"
)

i_redis_post_min = 0
i_redis_post_max = 65535
t_redis_post = Text(
    desc = "Redis server port number.",
    prompt = f"Port ({i_redis_post_min}-{i_redis_post_max})?"
)

i_redis_dbnum_min = 0
i_redis_dbnum_max = 15
t_redis_dbnum = Text(
    desc = "Redis database number.",
    prompt = f"DB number ({i_redis_dbnum_min}-{i_redis_dbnum_max})?"
)

t_redis_ssl = Text(
    desc = "Enable SSL to connect to the Redis server.",
    prompt = "SSL enabled (y/n)?"
)

t_redis_password = Text(
    desc = "Redis password.",
    prompt = "Password?"
)

i_redis_expire_min = 0
i_redis_expire_max = 365
t_redis_expire = Text(
    desc = "The expiration time to use when putting any entry into the cache. The time is specified in days.",
    prompt = f"Expiration days ({i_redis_expire_min}-{i_redis_expire_max})?"
)

t_auth_env_prefix = Text(
    desc = "A prefix to use when looking up environment variables.",
    prompt = "Enviroment variable prefix?"
)

t_date_field = Text(
    desc = "The name of the date field on the EventLogFile object to use when building log file queries.",
    prompt = "Date field?"
)

i_generation_interval_min = 1
i_generation_interval_max = 2
t_generation_interval = Text(
    desc = "The value of the Interval field on the EventLogFile object to use when building log file queries.",
    prompt = f"Generation interval ({i_generation_interval_min}-{i_generation_interval_max})?"
)

i_time_lag_minutes_min = 0
i_time_lag_minutes_max = 1440
t_time_lag_minutes = Text(
    desc = "An offset duration (in minutes) to use when building log file queries.",
    prompt = f"Time lag minutes ({i_time_lag_minutes_min}-{i_time_lag_minutes_max})?"
)

t_logs_enabled = Text(
    desc = "Flag to explicitly enable or disable the default generated log file query.",
    prompt = "Logs enabled (y/n)?"
)

t_query_query = Text(
    desc = "The SOQL query to execute.",
    prompt = "Query?"
)

i_query_api_name_min = 1
i_query_api_name_max = 2
t_query_api_name = Text(
    desc = "The name of the Salesforce Platform API to use.",
    prompt = f"API name ({i_query_api_name_min}-{i_query_api_name_max})?"
)

t_query_event_type = Text(
    desc = "The name of an event type to use when transforming log messages and query results to New Relic logs or events.",
    prompt = "Event type?"
)

t_query_timestamp_attr = Text(
    desc = "The name of the query record field containing the value to use for the timestamp.",
    prompt = "Timestamp attribute?"
)

t_query_rename_timestamp = Text(
    desc = "The name to use for the attribute on the log or event under which the timestamp will be stored.",
    prompt = "Rename timestamp?"
)

i_num_queries_min = 1
i_num_queries_max = 50
t_num_queries = Text(
    desc = "Salesforce queries to run for all instances.",
    prompt = f"How many queries do you want to set up ({i_num_queries_min}-{i_num_queries_max})?"
)

i_num_queries_instance_min = 0
t_num_queries_instance = Text(
    desc = "Salesforce queries to run in current instance only.",
    prompt = f"How many queries do you want to set up ({i_num_queries_instance_min}-{i_num_queries_max})?"
)

i_nr_data_format_min = 1
i_nr_data_format_max = 2
t_nr_data_format = Text(
    desc = "New Relic telemetry type.",
    prompt = f"Data format ({i_nr_data_format_min}-{i_nr_data_format_max})?"
)

i_nr_api_endpoint_min = 1
i_nr_api_endpoint_max = 3
t_nr_api_endpoint = Text(
    desc = "New Relic region identifier.",
    prompt = f"API endpoint ({i_nr_api_endpoint_min}-{i_nr_api_endpoint_max})?"
)

t_nr_account_id = Text(
    desc = "New Relic account ID.",
    prompt = "Account ID (numeric)?"
)

t_nr_license_key = Text(
    desc = "New Relic license key.",
    prompt = "License key?"
)

t_query_id_list = Text(
    desc = "A list of field names to use when generating record IDs.",
    prompt = "IDs (comma separated)?"
)

t_query_env = Text(
    desc = "A set of query substitution variables.",
    prompt = None
)

t_conf_limits = Text(
    desc = "Limits collection configuration.",
    prompt = "Do you want to set up limits (y/n)?"
)

t_limits_event_type = Text(
    desc = "The name of an event type to use when transforming limits to New Relic logs or events.",
    prompt = "Event type?"
)

t_limits_name_list = Text(
    desc = "An array of limit names to collect.",
    prompt = "Names (comma separated)?"
)

t_warning_missing_auth = """Auth data is REQUIRED.
If you don't set it in the config file, you MUST provide it as env variables.
Check the documentation for details."""

t_warning_missing_account_id = """Account ID is REQUIRED.
If you don't set it in the config file, you MUST provide it as an env variable.
Check the documentation for details."""

t_warning_missing_license = """License Key is REQUIRED.
If you don't set it in the config file, you MUST provide it as an env variable.
Check the documentation for details."""